[assembly: System.Resources.NeutralResourcesLanguage("en-US")]
[assembly: System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v6.0", FrameworkDisplayName=".NET 6.0")]
public static class LoadAssembliesOnStartup { }
public static class ModuleInitializer
{
    public static void Initialize() { }
}
namespace Orc.Analytics
{
    public class AnalyticsValue
    {
        public AnalyticsValue() { }
        public string Category { get; set; }
        public string Key { get; set; }
        public object? Value { get; set; }
    }
    public class ConfigurationAnalyticsValue : Orc.Analytics.AnalyticsValue
    {
        public ConfigurationAnalyticsValue(Catel.Configuration.ConfigurationContainer container, string key, object? defaultValue) { }
        public Catel.Configuration.ConfigurationContainer Container { get; set; }
        public object? DefaultValue { get; set; }
    }
    public class EmptyAnalyticsService : Orc.Analytics.IAnalyticsService
    {
        public EmptyAnalyticsService() { }
        public bool IsEnabled { get; set; }
        public virtual System.Threading.Tasks.Task QueueEventAsync(string category, string action, string? label = null, long value = 0) { }
        public virtual System.Threading.Tasks.Task QueueTimingAsync(System.TimeSpan time, string category, string variable, string? label = null) { }
        public virtual System.Threading.Tasks.Task QueueTransactionAsync(string sku, string name, string transactionId, long costPerProduct, int quantity = 1) { }
        public virtual System.Threading.Tasks.Task QueueViewAsync(string viewName) { }
        public virtual System.Threading.Tasks.Task SendAsync() { }
    }
    public static class FrameworkElementExtensions
    {
        public static System.Threading.Tasks.Task TrackViewForAnalyticsAsync(this System.Windows.FrameworkElement frameworkElement) { }
    }
    public interface IAnalyticsService
    {
        bool IsEnabled { get; set; }
        System.Threading.Tasks.Task QueueEventAsync(string category, string action, string? label = null, long value = 0);
        System.Threading.Tasks.Task QueueTimingAsync(System.TimeSpan time, string category, string variable, string? label = null);
        System.Threading.Tasks.Task QueueTransactionAsync(string sku, string name, string transactionId, long costPerProduct, int quantity = 1);
        System.Threading.Tasks.Task QueueViewAsync(string viewName);
        System.Threading.Tasks.Task SendAsync();
    }
    public static class IAnalyticsServiceExtensions
    {
        public static System.Threading.Tasks.Task ExecuteAndTrackAsync(this Orc.Analytics.IAnalyticsService analyticsService, System.Func<System.Threading.Tasks.Task> func, string category, string variable) { }
        public static System.Threading.Tasks.Task<T> ExecuteAndTrackWithResultAsync<T>(this Orc.Analytics.IAnalyticsService service, System.Func<System.Threading.Tasks.Task<T>> func, string category, string variable) { }
        public static System.Threading.Tasks.Task QueueAnalyticsValuesAsync(this Orc.Analytics.IAnalyticsService analyticsService, params Orc.Analytics.AnalyticsValue[] values) { }
        public static System.Threading.Tasks.Task QueueCommandAsync(this Orc.Analytics.IAnalyticsService analyticsService, string viewModelName, string commandName) { }
        public static System.Threading.Tasks.Task QueueConfigurationValuesAsync(this Orc.Analytics.IAnalyticsService analyticsService, params Orc.Analytics.ConfigurationAnalyticsValue[] configurationValues) { }
        public static System.Threading.Tasks.Task QueueViewModelClosedAsync(this Orc.Analytics.IAnalyticsService analyticsService, string viewModel, System.TimeSpan duration) { }
        public static System.Threading.Tasks.Task QueueViewModelCreatedAsync(this Orc.Analytics.IAnalyticsService analyticsService, string viewModel) { }
    }
    public interface IUserIdService
    {
        string GetUserId();
    }
    public class UserIdService : Orc.Analytics.IUserIdService
    {
        public UserIdService() { }
        public virtual string GetUserId() { }
    }
}
namespace Orc.Analytics.Auditors
{
    public class AnalyticsAuditor : Catel.MVVM.Auditing.AuditorBase
    {
        public AnalyticsAuditor(Orc.Analytics.IAnalyticsService analyticsService) { }
        public override void OnCommandExecuted(Catel.MVVM.IViewModel? viewModel, string? commandName, Catel.MVVM.ICatelCommand command, object? commandParameter) { }
        public override void OnViewModelClosed(Catel.MVVM.IViewModel viewModel) { }
        public override void OnViewModelCreated(Catel.MVVM.IViewModel viewModel) { }
    }
}